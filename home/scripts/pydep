#!/usr/bin/env python3
from __future__ import annotations

import argparse
import ast
import os
import sys
from collections import defaultdict

BUILTINS = set(sys.builtin_module_names) | set(sys.stdlib_module_names)


class Visitor(ast.NodeVisitor):
    def __init__(self) -> None:
        self.modules: set[str] = set()

    def visit_Import(self, node: ast.Import) -> None:
        for module in node.names:
            self.modules.add(module.name.split(".")[0])

    def visit_ImportFrom(self, node: ast.ImportFrom) -> None:
        if node.module is not None:
            self.modules.add(node.module.split(".")[0])


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("path", nargs="?", default=".")
    parser.add_argument("--sources", "-s", action="store_true")
    parser.add_argument("--builtins", "-b", action="store_true")
    args = parser.parse_args()

    modules: defaultdict[str, list[str]] = defaultdict(list)

    for dirpath, _, filenames in os.walk(args.path):
        for filename in filenames:
            path = os.path.join(dirpath, filename)
            ext = os.path.splitext(path)[-1]

            if ext == ".py":
                with open(path) as f:
                    contents = f.read()

            elif ext == "" and os.access(path, os.X_OK):
                with open(path) as f:
                    try:
                        line = f.readline()
                    except UnicodeError:
                        continue
                    if line.startswith("#!") and "python" not in line:
                        continue
                    contents = f.read()

            else:
                continue

            tree = ast.parse(contents)

            visitor = Visitor()
            visitor.visit(tree)

            for module in visitor.modules:
                modules[module].append(path)

    for module, files in sorted(modules.items()):
        if args.builtins is False and module in BUILTINS:
            continue
        sys.stdout.write(f"\033[m{module}\033[m\n")
        if args.sources:
            for file in files:
                sys.stdout.write(f"  \033[2m{file}\033[m\n")

    sys.stdout.flush()

    return 0


if __name__ == "__main__":
    raise SystemExit(main())
