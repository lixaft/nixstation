#!/usr/bin/env python3
from __future__ import annotations

import argparse
import os
import subprocess
import sys
from concurrent.futures import ThreadPoolExecutor
from threading import Lock
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from collections.abc import Iterator
    from collections.abc import Sequence

_TTY = sys.stdout.isatty()
_CFG = (
    "-c",
    f"color.ui={"always" if _TTY else "never"}",
)

_lock = Lock()


def _fmt_repo(repo: str) -> bytes:
    s = f"{repo}\n"
    if _TTY:
        s = f"\033[1;4m{s}\033[m"
    return s.encode()


def _get_repos(directory: str) -> Iterator[str]:
    for repo in os.listdir(directory):
        path = os.path.join(directory, repo)
        if os.path.exists(os.path.join(path, ".git")):
            yield path


def cmd_list(args: argparse.Namespace) -> int:
    for repo in _get_repos(args.directory):
        sys.stdout.buffer.write(_fmt_repo(repo))
        sys.stdout.buffer.flush()
    return 0


def _status(repo: str) -> None:
    cmd = (
        "git",
        *_CFG,
        "-C",
        repo,
        "status",
        "--short",
    )
    ret = subprocess.run(cmd, check=True, capture_output=True)
    with _lock:
        sys.stdout.buffer.write(_fmt_repo(repo))
        sys.stdout.buffer.write(ret.stderr)
        sys.stdout.buffer.write(ret.stdout)
        sys.stdout.buffer.flush()


def cmd_status(args: argparse.Namespace) -> int:
    with ThreadPoolExecutor() as executor:
        executor.map(_status, _get_repos(args.directory))
    return 0


def _pull(repo: str) -> int:
    cmd = (
        "git",
        *_CFG,
        "-C",
        repo,
        "pull",
        "origin",
    )
    ret = subprocess.run(cmd, check=True, capture_output=True)
    with _lock:
        sys.stdout.buffer.write(_fmt_repo(repo))
        sys.stdout.buffer.write(ret.stderr)
        sys.stdout.buffer.write(ret.stdout)
        sys.stdout.buffer.flush()

    return 0


def cmd_pull(args: argparse.Namespace) -> int:
    with ThreadPoolExecutor() as executor:
        executor.map(_pull, _get_repos(args.directory))
    return 0


def _diff(repo: str) -> None:
    subprocess.run(("git", "-C", repo, "fetch", "origin"), check=True)
    cmd = (
        "git",
        *_CFG,
        "-C",
        repo,
        "diff",
        "...origin/HEAD",
        "--stat",
    )
    ret = subprocess.run(cmd, check=True, capture_output=True)
    with _lock:
        sys.stdout.buffer.write(_fmt_repo(repo))
        sys.stdout.buffer.write(ret.stderr)
        sys.stdout.buffer.write(ret.stdout)
        sys.stdout.buffer.flush()


def cmd_diff(args: argparse.Namespace) -> int:
    with ThreadPoolExecutor() as executor:
        executor.map(_diff, _get_repos(args.directory))
    return 0


def parse_args(argv: Sequence[str] | None) -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("-d", "--directory", default=".")

    sub = parser.add_subparsers(
        title="commands",
        dest="command",
        required=True,
    )
    sub.add_parser("diff")
    sub.add_parser("list")
    sub.add_parser("pull")
    sub.add_parser("status")

    return parser.parse_args(argv)


def main(argv: Sequence[str] | None = None) -> int:
    args = parse_args(argv)

    if not os.path.exists(args.directory):
        msg = f"{args.directory!r} does not exists"
        raise SystemExit(msg)

    if args.command == "list":
        return cmd_list(args)
    if args.command == "status":
        return cmd_status(args)
    if args.command == "pull":
        return cmd_pull(args)
    if args.command == "diff":
        return cmd_diff(args)

    return 1


if __name__ == "__main__":
    raise SystemExit(main())
